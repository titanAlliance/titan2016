// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5536.Titan2016;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainleftFrontMotor;
    public static SpeedController driveTrainleftRearMotor;
    public static SpeedController driveTrainrightFrontMotor;
    public static SpeedController driveTrainrightRearMotor;
    public static RobotDrive driveTrainRobotDrive;
    public static Ultrasonic driveTrainultraSonic1;
    public static SpeedController intakeintake;
    public static CANTalon shooterrightShooter;
    public static CANTalon shooterleftShooter;
    public static Solenoid shooterfireSolenoid;
    public static SpeedController armarmMotor;
    public static DigitalInput armarmUpLimit;
    public static DigitalInput armarmDownLimit;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainleftFrontMotor = new Spark(0);
        LiveWindow.addActuator("driveTrain", "leftFrontMotor", (Spark) driveTrainleftFrontMotor);
        
        driveTrainleftRearMotor = new Spark(3);
        LiveWindow.addActuator("driveTrain", "leftRearMotor", (Spark) driveTrainleftRearMotor);
        
        driveTrainrightFrontMotor = new Spark(2);
        LiveWindow.addActuator("driveTrain", "rightFrontMotor", (Spark) driveTrainrightFrontMotor);
        
        driveTrainrightRearMotor = new Spark(1);
        LiveWindow.addActuator("driveTrain", "rightRearMotor", (Spark) driveTrainrightRearMotor);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainleftFrontMotor, driveTrainrightRearMotor,
              driveTrainrightFrontMotor, driveTrainleftRearMotor);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveTrainultraSonic1 = new Ultrasonic(2, 3);
        LiveWindow.addSensor("driveTrain", "ultraSonic1", driveTrainultraSonic1);
        
        intakeintake = new Talon(4);
        LiveWindow.addActuator("intake", "intake", (Talon) intakeintake);
        
        shooterrightShooter = new CANTalon(3);
        LiveWindow.addActuator("shooter", "rightShooter", shooterrightShooter);
        
        shooterleftShooter = new CANTalon(4);
        LiveWindow.addActuator("shooter", "leftShooter", shooterleftShooter);
        
        shooterfireSolenoid = new Solenoid(0, 1);
        LiveWindow.addActuator("shooter", "fireSolenoid", shooterfireSolenoid);
        
        armarmMotor = new Talon(5);
        LiveWindow.addActuator("arm", "armMotor", (Talon) armarmMotor);
        
        armarmUpLimit = new DigitalInput(0);
        LiveWindow.addSensor("arm", "armUpLimit", armarmUpLimit);
        
        armarmDownLimit = new DigitalInput(1);
        LiveWindow.addSensor("arm", "armDownLimit", armarmDownLimit);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
